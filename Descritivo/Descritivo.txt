        * -------------------------------------- *
        * Modelagem do banco de dados            *
        * -------------------------------------- *


Tabelas
|
├── tbUsuario
|   ├── id ---------------- ( chave primária    )
|   ├── nome -------------- ( string            )
|   ├── data_nascimento --- ( data_eveto        )
|   ├── cpf --------------- ( string            )
|   ├── username ---------- ( string            )
|   └── senha ------------- ( string            )
|
└── tbEvento
    ├── id ---------------- ( chave primária    )
    ├── data_eveto -------- ( date              )
    ├── titulo ------------ ( string            )
    ├── descricao --------- ( string            )
    ├── publico ----------- ( booleano          )
    └── id_usuario -------- ( chave estrangeira )


        * -------------------------------------- *
        * Script para criação do banco de dados  *
        * -------------------------------------- *


CREATE TABLE usuario (
    id serial,
    nome VARCHAR(50) NOT NULL,
    data_nascimento DATE NOT NULL,
    cpf VARCHAR(11) NOT NULL,
    username VARCHAR(50) NOT NULL,
    senha VARCHAR(256) NOT NULL,
PRIMARY KEY (id));

    
CREATE TABLE evento (
    id serial,
    data_evento DATE NOT NULL,
    titulo VARCHAR(50) NOT NULL,
    descricao VARCHAR(200) NOT NULL,
    publico BOOL NOT NULL,
    id_usuario INT NOT NULL,
PRIMARY KEY (id),
FOREIGN KEY (id_usuario)
    REFERENCES usuario (id));


        * -------------------------------------- *
        * Estrutura de arquivos e pastas         *
        * -------------------------------------- *

app
├── models 
|   ├── evento.py
|   └── usuario.py
├── static
|   └── style.css
├── templates
|   ├── calendario.html
|   ├── evento.html
|   ├── home.html
|   ├── index.html
|   ├── listar_eventos.html => Falta fazero layout desta página
|   ├── login.html
|   ├── registro.html
|   └── sobre.html
├── views
|   └── view.py  
├── static
|   └── style.css
├── banco.py
├── config.py
└── main.py


def pega_dados():
    import json
    with open('config.json') as f:
        return json.load(f)

@app.route('/<key>', methods = ['POST'])
def predict(key):
    config = pega_dados()
    try:
        model = config[key]['model']
        load = config[key]['load']
        threshold = config[key]['threshold']
    except Exception as e:
        print(e)
        return abort(404, e)

    try:
        information = request.data
    except Exception as e:
        print(e)
        return abort(400, e)

    try:
        results_inventory = predict.pred(information)
        inventory = set_inventory(results_inventory)
        return jsonify(inventory)
   except Exception as e:
        print(e)
        return abort(500, e)



, id=pessoa.id passar como parametro
<a href="{{ url_for('editar', id=pessoa.id ) }}">Editar</a>

/posts/{id}

@app.route("/order/from/<string:order_from>/to/<string:order_to>", methods=["GET"])

@app.route('/save_info/<filepath>', methods=['GET', 'POST'])
def save_info(filepath):
  if request.method == 'POST' or filepath:
    ...